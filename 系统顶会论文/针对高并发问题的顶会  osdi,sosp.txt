首先基础要好，特别是操作系统这一块，最好是能读过一些操作系统实现，最开始不用那么复杂，看linux最早期版本或者说教学用的操作系统。
只有深刻的理解操作系统和它各个组件（内存管理，进程线程抽象，同步互斥各种锁信号量，ipc通信机制，文件系统等）
的实现原理才能深刻理解高并发。看系统顶会的论文，建立对高性能高并发的感性认识，例如osdi，sosp等等。
绝大部分系统顶会论文都会分析所实现项目高性能的原理，例如减少了线程上下文切换，提高了缓存命中率，
使用了各种bypass技术等。在这个过程中，自己会逐步理解高性能高并发更底层的原因。其实上面两步大部分情况下已经足够了，
剩下的就是项目的积累了。当然如果还想做的更好，那就是要真实经验了，不仅要有感应认识，还要有理性认识，这个时候最好自己动手去测试，
去跑benchmark，去修改源码做实验，跑实验的过程中时常用系统工具观察现象来验证自己的想法对不对，比如说观察内存缺页是都会有很多，
观察缓存命中率，观察时延带宽，记录网络收发包瓶颈，记录中断次数等等，一定要自我验证自我解释，
并根据观察到的现象来验证自己的猜想对不对，在这个基础上慢慢总结积累，肯定是越来越厉害的。以上就是我个人看法。